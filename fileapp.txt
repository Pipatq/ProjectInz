# from flask import Flask, render_template, request, jsonify
# import csv
# from datetime import datetime
# import os

# app = Flask(__name__)

# @app.route('/')
# def index():
#     return render_template('index.html')

# @app.route('/test')
# def test():
#     return render_template('test.html')

# @app.route('/check')
# def check():
#     return render_template('testfile.html')

# @app.route('/backend')
# def backend():
#     return render_template('backend.html')

# @app.route('/save-log', methods=['POST'])
# def save_log():
#     try:
#         data = request.json
        
#         # Define the log file path
#         log_filename = os.path.join('static', 'log.csv')
        
#         # Check if file exists to write header
#         file_exists = os.path.isfile(log_filename)
        
#         with open(log_filename, 'a', newline='', encoding='utf-8') as f:
#             writer = csv.writer(f)
            
#             # Write header if file doesn't exist
#             if not file_exists:
#                 writer.writerow(['id', 'fname', 'lname', 'date', 'type', 'products', 'total'])
            
#             # Write the log entry
#             writer.writerow([
#                 data.get('id'),
#                 data.get('fname'),
#                 data.get('lname'),
#                 data.get('date'),
#                 data.get('type'),
#                 data.get('products'),
#                 data.get('total')
#             ])
            
#         return jsonify({'status': 'success'})
#     except Exception as e:
#         return jsonify({'status': 'error', 'message': str(e)}), 500



# if __name__ == '__main__':
#     # Create static directory if it doesn't exist
#     if not os.path.exists('static'):
#         os.makedirs('static')
#     app.run(host='0.0.0.0', port=9998, debug=True)


from flask import Flask, render_template, request, jsonify
import csv
import os
from datetime import datetime
app = Flask(__name__)

# --- Static Page Routes ---
# These routes simply serve your HTML pages.

@app.route('/')
def index():
    """ Serves the main or index page. """
    return render_template('index.html')

@app.route('/test')
def test():
    """ Serves the test page. """
    return render_template('test.html')

@app.route('/check')
def check():
    """ Serves the check page. """
    return render_template('testfile.html')

@app.route('/backend')
def backend():
    """ Serves the main application interface. """
    return render_template('backend.html')


# --- API Route for Saving Data ---

@app.route('/save-log', methods=['POST'])
def save_log():
    """
    Receives patient and transaction data as JSON,
    and saves it to a CSV log file.
    """
    try:
        # Get data from the frontend request
        data = request.json
        
        # Define the log file path within the 'static' directory
        log_filename = os.path.join('static', 'log.csv')
        
        # Check if the file already exists and is not empty
        file_exists = os.path.isfile(log_filename)
        is_empty = os.path.getsize(log_filename) == 0 if file_exists else True
        
        # Open the CSV file in 'append' mode
        with open(log_filename, 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            
            # Define the complete list of headers including the new 'comment' field
            headers = [
                'id', 'fname', 'lname', 'date', 'type', 'products', 'total',
                'doctor_name', 'consultant', 'hospital_fee', 'deposit_amount',
                'outstanding_balance', 'payment_method', 'review_status',
                'procedure_info', 'patient_age', 'comment'
            ]

            # If the file is new or empty, write the header row first
            if not file_exists or is_empty:
                writer.writerow(headers)
            
            # Create a list of values from the data, ensuring the order matches the headers
            row_data = [
                data.get('id', ''),
                data.get('fname', ''),
                data.get('lname', ''),
                data.get('date', ''),
                data.get('type', ''),
                data.get('products', ''),
                data.get('total', 0),
                data.get('doctor_name', ''),
                data.get('consultant', ''),
                data.get('hospital_fee', 0),
                data.get('deposit_amount', 0),
                data.get('outstanding_balance', 0),
                data.get('payment_method', ''),
                data.get('review_status', ''),
                data.get('procedure_info', ''),
                data.get('patient_age', ''),
                data.get('comment', '') # Added the new comment field
            ]
            
            # Write the new data row to the CSV file
            writer.writerow(row_data)
            
        # Return a success response to the frontend
        return jsonify({'status': 'success', 'message': 'Log saved successfully.'})

    except Exception as e:
        # If an error occurs, log it for debugging and return an error response
        app.logger.error(f"Error saving log: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500


# --- Main Application Execution ---

if __name__ == '__main__':
    # Ensure the 'static' directory exists before starting the app
    if not os.path.exists('static'):
        os.makedirs('static')
        
    # Run the Flask application
    app.run(host='0.0.0.0', port=9998, debug=True)
